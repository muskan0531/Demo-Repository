This is version 1 of my project
I want this changes to go into commit 2
changed by Muskan


git init   //initializing(one time)
rm -rf .git //deleting git repository 
git restore -->restore changes (change modified to last commit)

git status
git add . or git add --a (All) or git add first.txt (specific) --> add files in staging area (ready to commit)

ls (lists all the files)

touch   //create file using command line
touch .gitignore  //you include all those files you want to ignore in .gitignore (see .gitignore) . these files will not be tracked.

git diff (compare 2 same files ( modified and other is ready to commit) --> compare working directory with staging area
git diff --staged  --> compare previous commit with staging area

git commit -m "give some title or something so you can refer later"
git commit -a -m " text " --> direct commit(skip staging area) but we need to add untracked files seperately because those files can not directy commit 

git log --> shows all the commits you'd made

press q key --. pager will exit

when we rename a file git consider old name file as deleted and new name file as untracked file until we add that file to stage area

git rm filename with extension  --> Remove file 
							//both will stage files too 
git mv old_name new_name   --> Rename file  


//for untracking the file explicitly
git rm --cached file name with extension --> if we are tracking a file and later realised we want to ignore that file and we add that file in .gitignore but that doesn't work until  we tell explicitly to untrack the file

git clone url(url you want to insert) folder_name(you want to give to your repository folder) --> google se repositry uthana  

git log -p --> changes will be shown 
git log -p -2/-3/-4/-n  --> only n no. of commits will be shown.

git log --stat --> in brief discrption what changes have been made.

git log --pretty=oneline  --> each comment in log will be shownn be shown in oneline.
git log --pretty=short --> short comment
git log --pretty=full --> full comment
git log --pretty=format:"%h -- %an" --> "google git scm.com (git log documentation for formatting).
(kisi bhi format me jese upr hmne bola place holder then 2 minus sign then author name)

git log --since=2.days --> filter applied which means only work of last 2 days.
git log --since=2.weeks
git log --since=2.months
git log --since=2.years

git commit --amend --> we will be able to amend our comment in previous comment  

but we will first have to modify then add then check status then amend .
vim editor will be shown .
i (insert)
esc then : with shift then w nd q. --> quit

git restore --staged file_name with extension -->Unstage file

git checkout -- file_name with extension -->unmodify file
git checkout -f --> working directory changed into previous commit. you loose all the changes you have made after last commit.


git remote add origin website_name --> orign is name 
git remote --> show all repository
git remote -v --> shows fetch and pull website 



//set SSH keys in order to add you content into github repository
settings -> new ssh key --> give title
SSH Keys github -->search on google for keys.  
then follow steps

git pull -->github to local
git push -->local to github


 git remote add origin https://github.com/muskan0531/gitlearning.git
 ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
 eval $(ssh-agent -s)
 ssh-add ~/.ssh/id_rsa
 tail ssh-add ~/.ssh/id_rsa.pub  -->it'll generate some big line of key which we will put on github ssh key in order to generate link and we will be able to make push and pull request

git push -u origin master -->pushing into github 

git config --global alias.st status --> after this we will be able to use git st for knowing status. 
git config --global alias.unstage 'restore --staged --'


 (suggestion to follow always) Always commit before changing branch.
git checkout -b newbranch_name -->new branch (-b means make new branch)
git checkout master --> checkout from newbranch and come back to master state

but .gitignore will be ignored.

git branch -->shows all our branches.
git branch -v -->shows all our branches with last commits.


git merge branch_name(not master) -->merge branch with master branch
git branch --merged -->shows branches which are already merged. hence can be deleted.
git branch --no -merged -->not merged .

git branch -d branch_name --> gives error if branch is not merged.
git branch -d branch_name --> no error even if branch is not merged.

Merge conflicts can arise if git consider 2 of the changes equally important example - in an html index file in more than one branch title has changed.
if message is already written then you can use same message using vim editor .don't use -m" " after commit to use vim editor.


2 types of Branches :
1) Long Running branches
2) Topic branches 

#repository using https


